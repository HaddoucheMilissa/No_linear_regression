{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOf/u9W7I6TPLfXKrLw/vkF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HaddoucheMilissa/No_linear_regression/blob/main/No-linear-regression.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "2hCdk6FJ3UqD"
      },
      "outputs": [],
      "source": [
        "from google.colab import files"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "up=files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "THQC55s74yvz",
        "outputId": "985035ec-e2eb-4e04-f8b6-0c4915f29183"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-6bed760f-ac23-4ac7-a487-792cb1420ed6\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-6bed760f-ac23-4ac7-a487-792cb1420ed6\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving heart_rate.txt to heart_rate (1).txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import  pandas as pd\n",
        "import  matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "df = pd.read_csv(\"heart_rate.txt\")\n",
        "pd.options.display.max_rows=300\n",
        "pd.options.display.max_columns=2\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J-etRaLk4MbU",
        "outputId": "ced3af23-9a57-4d11-b459-02d066dca386"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     Time (sec)  Heart Rate (BPM)\n",
            "0           0.0               103\n",
            "1           5.0               103\n",
            "2          10.0               103\n",
            "3          15.0               105\n",
            "4          20.0               108\n",
            "5          25.0               110\n",
            "6          30.0               110\n",
            "7          35.0               112\n",
            "8          40.0               112\n",
            "9          45.0               114\n",
            "10         50.0               114\n",
            "11         55.0               117\n",
            "12         60.0               117\n",
            "13         65.0               118\n",
            "14         70.0               119\n",
            "15         75.0               119\n",
            "16         80.0               120\n",
            "17         85.0               121\n",
            "18         90.0               121\n",
            "19         95.0               122\n",
            "20        100.0               123\n",
            "21        105.0               124\n",
            "22        110.0               124\n",
            "23        115.0               125\n",
            "24        120.0               126\n",
            "25        125.0               127\n",
            "26        130.0               128\n",
            "27        135.0               127\n",
            "28        140.0               128\n",
            "29        145.0               128\n",
            "30        150.0               129\n",
            "31        155.0               129\n",
            "32        160.0               130\n",
            "33        165.0               131\n",
            "34        170.0               132\n",
            "35        175.0               132\n",
            "36        180.0               132\n",
            "37        185.0               133\n",
            "38        190.0               134\n",
            "39        195.0               135\n",
            "40        200.0               135\n",
            "41        205.0               135\n",
            "42        210.0               135\n",
            "43        215.0               136\n",
            "44        220.0               136\n",
            "45        225.0               136\n",
            "46        230.0               137\n",
            "47        235.0               137\n",
            "48        240.0               137\n",
            "49        245.0               137\n",
            "50        250.0               138\n",
            "51        255.0               138\n",
            "52        260.0               138\n",
            "53        265.0               138\n",
            "54        270.0               139\n",
            "55        275.0               138\n",
            "56        280.0               138\n",
            "57        285.0               138\n",
            "58        290.0               138\n",
            "59        295.0               138\n",
            "60        300.0               138\n",
            "61        305.0               138\n",
            "62        310.0               138\n",
            "63        315.0               139\n",
            "64        320.0               140\n",
            "65        325.0               141\n",
            "66        330.0               141\n",
            "67        335.0               141\n",
            "68        340.0               141\n",
            "69        345.0               142\n",
            "70        350.0               141\n",
            "71        355.0               142\n",
            "72        360.0               142\n",
            "73        365.0               143\n",
            "74        370.0               143\n",
            "75        375.0               143\n",
            "76        380.0               143\n",
            "77        385.0               144\n",
            "78        390.0               144\n",
            "79        395.0               144\n",
            "80        400.0               145\n",
            "81        405.0               144\n",
            "82        410.0               145\n",
            "83        415.0               144\n",
            "84        420.0               145\n",
            "85        425.0               145\n",
            "86        430.0               144\n",
            "87        435.0               144\n",
            "88        440.0               144\n",
            "89        445.0               144\n",
            "90        450.0               145\n",
            "91        455.0               144\n",
            "92        460.0               144\n",
            "93        465.0               144\n",
            "94        470.0               145\n",
            "95        475.0               145\n",
            "96        480.0               146\n",
            "97        485.0               147\n",
            "98        490.0               147\n",
            "99        495.0               147\n",
            "100       500.0               147\n",
            "101       505.0               147\n",
            "102       510.0               147\n",
            "103       515.0               147\n",
            "104       520.0               147\n",
            "105       525.0               147\n",
            "106       530.0               147\n",
            "107       535.0               147\n",
            "108       540.0               147\n",
            "109       545.0               147\n",
            "110       550.0               147\n",
            "111       555.0               147\n",
            "112       560.0               146\n",
            "113       565.0               147\n",
            "114       570.0               146\n",
            "115       575.0               146\n",
            "116       580.0               146\n",
            "117       585.0               146\n",
            "118       590.0               147\n",
            "119       595.0               147\n",
            "120       600.0               147\n",
            "121       605.0               148\n",
            "122       610.0               148\n",
            "123       615.0               148\n",
            "124       620.0               147\n",
            "125       625.0               147\n",
            "126       630.0               148\n",
            "127       635.0               148\n",
            "128       640.0               148\n",
            "129       645.0               148\n",
            "130       650.0               148\n",
            "131       655.0               148\n",
            "132       660.0               147\n",
            "133       665.0               148\n",
            "134       670.0               147\n",
            "135       675.0               148\n",
            "136       680.0               148\n",
            "137       685.0               149\n",
            "138       690.0               148\n",
            "139       695.0               148\n",
            "140       700.0               149\n",
            "141       705.0               149\n",
            "142       710.0               149\n",
            "143       715.0               149\n",
            "144       720.0               149\n",
            "145       725.0               149\n",
            "146       730.0               149\n",
            "147       735.0               150\n",
            "148       740.0               150\n",
            "149       745.0               150\n",
            "150       750.0               150\n",
            "151       755.0               150\n",
            "152       760.0               150\n",
            "153       765.0               150\n",
            "154       770.0               149\n",
            "155       775.0               149\n",
            "156       780.0               149\n",
            "157       785.0               149\n",
            "158       790.0               149\n",
            "159       795.0               149\n",
            "160       800.0               148\n",
            "161       805.0               149\n",
            "162       810.0               149\n",
            "163       815.0               149\n",
            "164       820.0               149\n",
            "165       825.0               149\n",
            "166       830.0               149\n",
            "167       835.0               149\n",
            "168       840.0               148\n",
            "169       845.0               148\n",
            "170       850.0               148\n",
            "171       855.0               149\n",
            "172       860.0               150\n",
            "173       865.0               151\n",
            "174       870.0               151\n",
            "175       875.0               151\n",
            "176       880.0               151\n",
            "177       885.0               150\n",
            "178       890.0               151\n",
            "179       895.0               151\n",
            "180       900.0               149\n",
            "181       905.0               147\n",
            "182       910.0               146\n",
            "183       915.0               147\n",
            "184       920.0               150\n",
            "185       925.0               152\n",
            "186       930.0               153\n",
            "187       935.0               153\n",
            "188       940.0               153\n",
            "189       945.0               152\n",
            "190       950.0               152\n",
            "191       955.0               151\n",
            "192       960.0               151\n",
            "193       965.0               152\n",
            "194       970.0               152\n",
            "195       975.0               151\n",
            "196       980.0               152\n",
            "197       985.0               152\n",
            "198       990.0               152\n",
            "199       995.0               153\n",
            "200      1000.0               153\n",
            "201      1005.0               153\n",
            "202      1010.0               153\n",
            "203      1015.0               152\n",
            "204      1020.0               152\n",
            "205      1025.0               152\n",
            "206      1030.0               152\n",
            "207      1035.0               152\n",
            "208      1040.0               152\n",
            "209      1045.0               153\n",
            "210      1050.0               152\n",
            "211      1055.0               152\n",
            "212      1060.0               153\n",
            "213      1065.0               153\n",
            "214      1070.0               153\n",
            "215      1075.0               153\n",
            "216      1080.0               152\n",
            "217      1085.0               152\n",
            "218      1090.0               151\n",
            "219      1095.0               152\n",
            "220      1100.0               152\n",
            "221      1105.0               152\n",
            "222      1110.0               153\n",
            "223      1115.0               153\n",
            "224      1120.0               153\n",
            "225      1125.0               153\n",
            "226      1130.0               153\n",
            "227      1135.0               153\n",
            "228      1140.0               153\n",
            "229      1145.0               153\n",
            "230      1150.0               153\n",
            "231      1155.0               152\n",
            "232      1160.0               152\n",
            "233      1165.0               152\n",
            "234      1170.0               152\n",
            "235      1175.0               153\n",
            "236      1180.0               153\n",
            "237      1185.0               154\n",
            "238      1190.0               154\n",
            "239      1195.0               154\n",
            "240      1200.0               154\n"
          ]
        }
      ]
    }
  ]
}